{"id":"app.ts","dependencies":[{"name":"C:\\Users\\User\\Desktop\\Rxjx\\package.json","includedInParent":true,"mtime":1662363361583},{"name":"rxjs","loc":{"line":3,"column":21,"index":100},"parent":"C:\\Users\\User\\Desktop\\Rxjx\\Buffering\\app.ts","resolved":"C:\\Users\\User\\Desktop\\Rxjx\\node_modules\\rxjs\\dist\\esm5\\index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar rxjs_1 = require(\"rxjs\"); //#region Buffer Operator\n// Buffers the incoming Observable values until the given closingNotifier Observable emits a value, at which point it emits the buffer on the output Observable and starts a new buffer internally, awaiting the next time closingNotifier emits.\n// interval(19800).pipe(\n//     buffer(interval(1000)),\n// ).subscribe(d=>{\n//     console.log(d);\n// })\n//#region  End of Buffer operator\n// Buffers the source Observable values until the size hits the maximum bufferSize given.\n// Buffers a number of values from the source Observable by bufferSize then emits the buffer and clears it, and starts a new buffer each startBufferEvery values.\n\n\n(0, rxjs_1.interval)(100).pipe((0, rxjs_1.bufferCount)(3), (0, rxjs_1.take)(4)).subscribe(function (d) {\n  console.log(d);\n});"},"sourceMaps":{"js":{"mappings":[{"source":"app.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":0}},{"source":"app.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":4}},{"source":"app.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":10}},{"source":"app.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":13}},{"source":"app.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":20}},{"source":"app.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":21}},{"source":"app.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":27}},{"source":"app.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":28}},{"source":"app.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":7,"column":30}},{"source":"app.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":8,"column":0}},{"source":"app.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":9,"column":0}},{"source":"app.ts","name":null,"original":{"line":7,"column":0},"generated":{"line":10,"column":0}},{"source":"app.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":11,"column":0}},{"source":"app.ts","name":null,"original":{"line":10,"column":0},"generated":{"line":12,"column":0}},{"source":"app.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"app.ts","name":null,"original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"app.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":15,"column":0}},{"source":"app.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":16,"column":0}},{"source":"app.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":19,"column":0}},{"source":"app.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":19,"column":1}},{"source":"app.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":19,"column":4}},{"source":"app.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":19,"column":10}},{"source":"app.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":19,"column":11}},{"source":"app.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":19,"column":19}},{"source":"app.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":19,"column":21}},{"source":"app.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":19,"column":24}},{"source":"app.ts","name":null,"original":{"line":21,"column":14},"generated":{"line":19,"column":26}},{"source":"app.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":19,"column":30}},{"source":"app.ts","name":null,"original":{"line":22,"column":4},"generated":{"line":19,"column":31}},{"source":"app.ts","name":null,"original":{"line":22,"column":4},"generated":{"line":19,"column":32}},{"source":"app.ts","name":null,"original":{"line":22,"column":4},"generated":{"line":19,"column":35}},{"source":"app.ts","name":null,"original":{"line":22,"column":4},"generated":{"line":19,"column":41}},{"source":"app.ts","name":null,"original":{"line":22,"column":4},"generated":{"line":19,"column":42}},{"source":"app.ts","name":null,"original":{"line":22,"column":4},"generated":{"line":19,"column":53}},{"source":"app.ts","name":null,"original":{"line":22,"column":16},"generated":{"line":19,"column":55}},{"source":"app.ts","name":null,"original":{"line":22,"column":4},"generated":{"line":19,"column":56}},{"source":"app.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":19,"column":57}},{"source":"app.ts","name":null,"original":{"line":23,"column":4},"generated":{"line":19,"column":59}},{"source":"app.ts","name":null,"original":{"line":23,"column":4},"generated":{"line":19,"column":60}},{"source":"app.ts","name":null,"original":{"line":23,"column":4},"generated":{"line":19,"column":63}},{"source":"app.ts","name":null,"original":{"line":23,"column":4},"generated":{"line":19,"column":69}},{"source":"app.ts","name":null,"original":{"line":23,"column":4},"generated":{"line":19,"column":70}},{"source":"app.ts","name":null,"original":{"line":23,"column":4},"generated":{"line":19,"column":74}},{"source":"app.ts","name":null,"original":{"line":23,"column":9},"generated":{"line":19,"column":76}},{"source":"app.ts","name":null,"original":{"line":23,"column":4},"generated":{"line":19,"column":77}},{"source":"app.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":19,"column":78}},{"source":"app.ts","name":null,"original":{"line":25,"column":2},"generated":{"line":19,"column":80}},{"source":"app.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":19,"column":89}},{"source":"app.ts","name":null,"original":{"line":25,"column":12},"generated":{"line":19,"column":90}},{"source":"app.ts","name":null,"original":{"line":25,"column":12},"generated":{"line":19,"column":100}},{"source":"app.ts","name":null,"original":{"line":25,"column":12},"generated":{"line":19,"column":101}},{"source":"app.ts","name":null,"original":{"line":25,"column":13},"generated":{"line":19,"column":103}},{"source":"app.ts","name":null,"original":{"line":26,"column":4},"generated":{"line":20,"column":2}},{"source":"app.ts","name":null,"original":{"line":26,"column":11},"generated":{"line":20,"column":9}},{"source":"app.ts","name":null,"original":{"line":26,"column":12},"generated":{"line":20,"column":10}},{"source":"app.ts","name":null,"original":{"line":26,"column":4},"generated":{"line":20,"column":13}},{"source":"app.ts","name":null,"original":{"line":26,"column":16},"generated":{"line":20,"column":14}},{"source":"app.ts","name":null,"original":{"line":26,"column":4},"generated":{"line":20,"column":15}},{"source":"app.ts","name":null,"original":{"line":28,"column":1},"generated":{"line":21,"column":0}},{"source":"app.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":21,"column":1}}],"sources":{"app.ts":"import {interval,buffer,take,bufferCount } from 'rxjs'\r\n\r\n\r\n//#region Buffer Operator\r\n// Buffers the incoming Observable values until the given closingNotifier Observable emits a value, at which point it emits the buffer on the output Observable and starts a new buffer internally, awaiting the next time closingNotifier emits.\r\n// interval(19800).pipe(\r\n//     buffer(interval(1000)),\r\n    \r\n// ).subscribe(d=>{\r\n//     console.log(d);\r\n    \r\n// })\r\n\r\n//#region  End of Buffer operator\r\n\r\n\r\n// Buffers the source Observable values until the size hits the maximum bufferSize given.\r\n\r\n// Buffers a number of values from the source Observable by bufferSize then emits the buffer and clears it, and starts a new buffer each startBufferEvery values.\r\n\r\ninterval(100).pipe(\r\n    bufferCount(3),\r\n    take(4)\r\n    \r\n).subscribe(d=>{\r\n    console.log(d);\r\n    \r\n})"},"lineCount":null}},"error":null,"hash":"dfa1014166b9c99c6e3a92cf1f128267","cacheData":{"env":{}}}