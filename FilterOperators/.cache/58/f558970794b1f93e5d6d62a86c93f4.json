{"id":"../node_modules/rxjs/dist/esm5/internal/operators/exhaustAll.js","dependencies":[{"name":"C:\\Users\\User\\Desktop\\Rxjx\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\exhaustAll.js.map","includedInParent":true,"mtime":1662363233380},{"name":"C:\\Users\\User\\Desktop\\Rxjx\\node_modules\\rxjs\\src\\internal\\operators\\exhaustAll.ts","includedInParent":true,"mtime":1662363234669},{"name":"C:\\Users\\User\\Desktop\\Rxjx\\package.json","includedInParent":true,"mtime":1662363361583},{"name":"C:\\Users\\User\\Desktop\\Rxjx\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1662363232801},{"name":"./exhaustMap","loc":{"line":1,"column":27,"index":27},"parent":"C:\\Users\\User\\Desktop\\Rxjx\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\exhaustAll.js","resolved":"C:\\Users\\User\\Desktop\\Rxjx\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\exhaustMap.js"},{"name":"../util/identity","loc":{"line":2,"column":25,"index":68},"parent":"C:\\Users\\User\\Desktop\\Rxjx\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\exhaustAll.js","resolved":"C:\\Users\\User\\Desktop\\Rxjx\\node_modules\\rxjs\\dist\\esm5\\internal\\util\\identity.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.exhaustAll = exhaustAll;\n\nvar _exhaustMap = require(\"./exhaustMap\");\n\nvar _identity = require(\"../util/identity\");\n\nfunction exhaustAll() {\n  return (0, _exhaustMap.exhaustMap)(_identity.identity);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/operators/exhaustAll.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../src/internal/operators/exhaustAll.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../src/internal/operators/exhaustAll.ts","name":null,"original":{"line":49,"column":6},"generated":{"line":12,"column":0}},{"source":"../../../../src/internal/operators/exhaustAll.ts","name":null,"original":{"line":49,"column":16},"generated":{"line":12,"column":9}},{"source":"../../../../src/internal/operators/exhaustAll.ts","name":null,"original":{"line":49,"column":6},"generated":{"line":12,"column":19}},{"source":"../../../../src/internal/operators/exhaustAll.ts","name":null,"original":{"line":49,"column":26},"generated":{"line":12,"column":22}},{"source":"../../../../src/internal/operators/exhaustAll.ts","name":null,"original":{"line":50,"column":2},"generated":{"line":13,"column":2}},{"source":"../../../../src/internal/operators/exhaustAll.ts","name":null,"original":{"line":50,"column":9},"generated":{"line":13,"column":9}},{"source":"../../../../src/internal/operators/exhaustAll.ts","name":null,"original":{"line":50,"column":9},"generated":{"line":13,"column":13}},{"source":"../../../../src/internal/operators/exhaustAll.ts","name":null,"original":{"line":50,"column":9},"generated":{"line":13,"column":35}},{"source":"../../../../src/internal/operators/exhaustAll.ts","name":null,"original":{"line":50,"column":20},"generated":{"line":13,"column":37}},{"source":"../../../../src/internal/operators/exhaustAll.ts","name":null,"original":{"line":50,"column":9},"generated":{"line":13,"column":55}},{"source":"../../../../src/internal/operators/exhaustAll.ts","name":null,"original":{"line":50,"column":2},"generated":{"line":13,"column":56}},{"source":"../../../../src/internal/operators/exhaustAll.ts","name":null,"original":{"line":51,"column":1},"generated":{"line":14,"column":0}}],"sources":{"../../../../src/internal/operators/exhaustAll.ts":"import { OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\nimport { exhaustMap } from './exhaustMap';\nimport { identity } from '../util/identity';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * ![](exhaust.png)\n *\n * `exhaustAll` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaustAll` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * ## Example\n *\n * Run a finite timer for each click, only if there is no currently active timer\n *\n * ```ts\n * import { fromEvent, map, interval, take, exhaustAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map(() => interval(1000).pipe(take(5)))\n * );\n * const result = higherOrder.pipe(exhaustAll());\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineLatestAll}\n * @see {@link concatAll}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return A function that returns an Observable that takes a source of\n * Observables and propagates the first Observable exclusively until it\n * completes before subscribing to the next.\n */\nexport function exhaustAll<O extends ObservableInput<any>>(): OperatorFunction<O, ObservedValueOf<O>> {\n  return exhaustMap(identity);\n}\n"},"lineCount":null}},"error":null,"hash":"d4d223b28e9c33fb6126e7c151f40a11","cacheData":{"env":{}}}